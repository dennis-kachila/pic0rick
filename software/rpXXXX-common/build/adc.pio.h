// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// --- //
// adc //
// --- //

#define adc_wrap_target 0
#define adc_wrap 3
#define adc_pio_version 1

static const uint16_t adc_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block           side 0
    0xa027, //  1: mov    x, osr          side 0
    0x5010, //  2: in     pins, 16        side 1
    0x0042, //  3: jmp    x--, 2          side 0
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program adc_program = {
    .instructions = adc_program_instructions,
    .length = 4,
    .origin = -1,
    .pio_version = adc_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config adc_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + adc_wrap_target, offset + adc_wrap);
    sm_config_set_sideset(&c, 1, false, false);
    return c;
}

    static inline void adc_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) 
    {
        pio_sm_config c = adc_program_get_default_config(offset);
        pio_gpio_init(pio, pin);
        pio_gpio_init(pio, pin + 1);
        pio_gpio_init(pio, pin + 2);
        pio_gpio_init(pio, pin + 3);
        pio_gpio_init(pio, pin + 4);
        pio_gpio_init(pio, pin + 5);
        pio_gpio_init(pio, pin + 6);
        pio_gpio_init(pio, pin + 7);
        pio_gpio_init(pio, pin + 8);
        pio_gpio_init(pio, pin + 9);
        pio_gpio_init(pio, pin + 10);
        sm_config_set_in_pins(&c, pin);
        sm_config_set_out_pins(&c, pin, 1);
        pio_sm_set_consecutive_pindirs(pio, sm, pin, 1, true);
        sm_config_set_sideset_pins(&c, pin);
        gpio_put(pin, false);
        sm_config_set_in_shift(&c, false, true, 16);
        float div = (clock_get_hz(clk_sys) / freq);
        sm_config_set_clkdiv(&c, div);
        pio_sm_init(pio, sm, offset, &c);
    }

#endif

// ------ //
// pulse1 //
// ------ //

#define pulse1_wrap_target 0
#define pulse1_wrap 7
#define pulse1_pio_version 1

static const uint16_t pulse1_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block           side 0
    0xa027, //  1: mov    x, osr          side 0
    0x80a0, //  2: pull   block           side 0
    0xa047, //  3: mov    y, osr          side 0
    0xa742, //  4: nop                    side 0 [7]
    0x0845, //  5: jmp    x--, 5          side 1
    0x1086, //  6: jmp    y--, 6          side 2
    0xd000, //  7: irq    nowait 0        side 2
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pulse1_program = {
    .instructions = pulse1_program_instructions,
    .length = 8,
    .origin = -1,
    .pio_version = pulse1_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config pulse1_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pulse1_wrap_target, offset + pulse1_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}

    static inline void pulse1_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) 
    {
        pio_sm_config c = pulse1_program_get_default_config(offset);
        pio_gpio_init(pio, pin);
        pio_gpio_init(pio, pin + 1);
        sm_config_set_out_pins(&c, pin, 2);
        pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, true);
        sm_config_set_sideset_pins(&c, pin);
        gpio_put(pin, false);
        gpio_put(pin + 1, false);
        sm_config_set_out_shift(&c, false, false, 32);
        float div = (clock_get_hz(clk_sys) / freq);
        sm_config_set_clkdiv(&c, div);
        pio_sm_init(pio, sm, offset, &c);
    }

#endif

// ------ //
// pulse2 //
// ------ //

#define pulse2_wrap_target 0
#define pulse2_wrap 3
#define pulse2_pio_version 1

static const uint16_t pulse2_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block           side 0
    0xa027, //  1: mov    x, osr          side 0
    0x30c0, //  2: wait   1 irq, 0        side 2
    0x1843, //  3: jmp    x--, 3          side 3
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program pulse2_program = {
    .instructions = pulse2_program_instructions,
    .length = 4,
    .origin = -1,
    .pio_version = pulse2_pio_version,
#if PICO_PIO_VERSION > 0
    .used_gpio_ranges = 0x0
#endif
};

static inline pio_sm_config pulse2_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + pulse2_wrap_target, offset + pulse2_wrap);
    sm_config_set_sideset(&c, 2, false, false);
    return c;
}

    static inline void pulse2_program_init(PIO pio, uint sm, uint offset, uint pin, float freq) 
    {
        pio_sm_config c = pulse2_program_get_default_config(offset);
        pio_gpio_init(pio, pin);
        pio_gpio_init(pio, pin + 1);
        sm_config_set_out_pins(&c, pin, 2);
        pio_sm_set_consecutive_pindirs(pio, sm, pin, 2, true);
        sm_config_set_sideset_pins(&c, pin);
        gpio_put(pin, false);
        gpio_put(pin + 1, false);
        sm_config_set_out_shift(&c, false, false, 32);
        float div = (clock_get_hz(clk_sys) / freq);
        sm_config_set_clkdiv(&c, div);
        pio_sm_init(pio, sm, offset, &c);
    }

#endif

